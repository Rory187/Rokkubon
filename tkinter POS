import tkinter as tk
from tkinter import messagebox
import pandas as pd
from datetime import datetime
import random
from sqlalchemy import create_engine
import psycopg2
import sys

db_server = 'rokkubon-server.postgres.database.azure.com'
db_name = 'rokkubon_db'
db_user = 'rokkubon'
db_password = 'W!nners123'

# Establish a connection to the Azure PostgreSQL database
conn = psycopg2.connect(
    host='rokkubon-server.postgres.database.azure.com',
    port="5432",
    database='rokkubon_db',
    user='rokkubon',
    password="W!nners123"
)


class QuantityPopup:
    def __init__(self, root):
        self.root = root
        self.root.title("Select Quantity")
        self.quantity = 0

        self.create_gui()

    def create_gui(self):
        quantity_frame = tk.Frame(self.root)
        quantity_frame.pack(padx=10, pady=10)

        quantity_label = tk.Label(quantity_frame, text="Quantity:")
        quantity_label.pack(side="left")

        self.quantity_var = tk.StringVar()
        self.quantity_var.set(str(self.quantity))

        quantity_entry = tk.Entry(quantity_frame, textvariable=self.quantity_var, width=5)
        quantity_entry.pack(side="left")

        quantity_buttons = tk.Frame(self.root)
        quantity_buttons.pack(padx=10, pady=10)

        for i in range(1, 10):
            button = tk.Button(quantity_buttons, text=str(i), width=5, command=lambda i=i: self.add_quantity(i))
            button.grid(row=(i - 1) // 3, column=(i - 1) % 3, padx=5, pady=5)

        zero_button = tk.Button(quantity_buttons, text="0", width=5, command=lambda: self.add_quantity(0))
        zero_button.grid(row=3, column=0, padx=5, pady=5)

        clear_button = tk.Button(quantity_buttons, text="Clear", width=5, command=self.clear_quantity)
        clear_button.grid(row=3, column=1, padx=5, pady=5)

        confirm_button = tk.Button(quantity_buttons, text="Confirm", width=5, command=self.confirm_quantity)
        confirm_button.grid(row=3, column=2, padx=5, pady=5)

    def add_quantity(self, num):
        current_quantity = int(self.quantity_var.get())
        self.quantity_var.set(str(current_quantity * 10 + num))

    def clear_quantity(self):
        self.quantity_var.set("0")

    def confirm_quantity(self):
        self.quantity = int(self.quantity_var.get())
        self.root.destroy()

class RestaurantManagementSystem:
    def __init__(self, root):
        self.root = root
        self.root.title("Restaurant Management System")

        self.customer_name = tk.StringVar()
        self.customer_contact = tk.StringVar()

        self.items = {
            "Sushi": 100,
            "Miso Soup": 200,
            "Crispy Teriyaki Salmon": 150,
            "Salmon Roll": 80,
            "Salad": 90,
            "mochi": 40
        }

        self.orders = {}

        self.gst_percentage = 18

        self.create_gui()
        self.bill_df = None  # Initialize the DataFrame variable
        self.current_order_id = None  # Initialize current order ID

    def create_gui(self):
        details_frame = tk.LabelFrame(self.root, text="ORDER INFO:")
        details_frame.pack(fill="x", padx=10, pady=10)

        name_label = tk.Label(details_frame, text="EMPLOYEE ID:")
        name_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
        name_entry = tk.Entry(details_frame, textvariable=self.customer_name)
        name_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")

        contact_label = tk.Label(details_frame, text="Table Number:")
        contact_label.grid(row=1, column=0, padx=5, pady=5, sticky="e")
        contact_entry = tk.Entry(details_frame, textvariable=self.customer_contact)
        contact_entry.grid(row=1, column=1, padx=5, pady=5, sticky="w")
        contact_entry.configure(validate="key")
        contact_entry.configure(validatecommand=(contact_entry.register(self.validate_contact), "%P"))

        menu_frame = tk.LabelFrame(self.root, text="Menu")
        menu_frame.pack(fill="both", expand=True, padx=10, pady=10)

        item_header = tk.Label(menu_frame, text="Items")
        item_header.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        quantity_header = tk.Label(menu_frame, text="Quantity")
        quantity_header.grid(row=0, column=1, padx=5, pady=5, sticky="w")

        row = 1
        for item, price in self.items.items():
            item_var = tk.IntVar()
            item_label = tk.Label(menu_frame, text=f"{item} - {self.convert_to_inr(price)}")
            item_label.grid(row=row, column=0, padx=5, pady=5, sticky="w")

            quantity_button = tk.Button(menu_frame, text="Select", command=lambda item=item: self.select_quantity(item))
            quantity_button.grid(row=row, column=1, padx=5, pady=5, sticky="w")

            self.orders[item] = {"var": item_var, "quantity": 0, "quantity_button": quantity_button}

            row += 1

        buttons_frame = tk.Frame(self.root)
        buttons_frame.pack(fill="x", padx=10, pady=10)

        print_bill_button = tk.Button(buttons_frame, text="Print Bill", command=self.show_bill_popup)
        print_bill_button.pack(side="left", padx=5)

        past_record_button = tk.Button(buttons_frame, text="Past Records", command=self.past_records)
        past_record_button.pack(side="left", padx=5)

        clear_selection_button = tk.Button(buttons_frame, text="Clear Selection", command=self.clear_selection)
        clear_selection_button.pack(side="left", padx=5)

        self.sample_bill_text = tk.Text(self.root, height=10)
        self.sample_bill_text.pack(fill="x", padx=10, pady=10)

        # Update sample bill when quantity or item is selected
        for item, info in self.orders.items():
            info["var"].trace("w", lambda *args, item=item: self.update_sample_bill(item))

    def select_quantity(self, item):
        quantity_popup = tk.Toplevel(self.root)
        quantity_popup.attributes("-topmost", True)
        quantity_popup.attributes("-toolwindow", True)
        quantity_popup.grab_set()
        quantity_popup.focus_set()

        quantity_popup.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))

        quantity_popup_window = QuantityPopup(quantity_popup)
        self.root.wait_window(quantity_popup)

        quantity = quantity_popup_window.quantity

        self.orders[item]["quantity"] = quantity
        self.update_sample_bill(item)

    def show_bill_popup(self):
        customer_name = self.customer_name.get().strip()
        employee_id = self.customer_contact.get().strip()
        table_number = self.customer_contact.get().strip()  # Assuming the same value is used for table number

        if not customer_name:
            messagebox.showwarning("Warning", "Please enter customer name.")
            return

        selected_items = []
        total_price = 0

        for item, info in self.orders.items():
            quantity = info["quantity"]
            if quantity:
                selected_items.append((item, quantity))
                total_price += self.items[item] * quantity

        if not selected_items:
            gst_amount = (total_price * self.gst_percentage) / 100
            return gst_amount

        bill_data = {
            "Gratitude": [],  # New column for customer's gratitude
            "EmployeeID": [],  # New column for employee ID
            "TableNumber": [],  # New column for table number
            "OrderID": [],
            "Item": [],
            "Quantity": [],
            "Price": [],
            "OrderTime": []
        }

        order_id = self.generate_order_id()  # Generate the order ID

        for item, quantity in selected_items:
            order_time = datetime.now()
            bill_data["Gratitude"].append((self.items[item] * quantity)*0.125)  # Add an empty string for customer's gratitude
            bill_data["EmployeeID"].append(employee_id)  # Add the employee ID
            bill_data["TableNumber"].append(table_number)  # Add the table number
            bill_data["OrderID"].append(order_id)  # Use the generated order ID for each item
            bill_data["Item"].append(item)
            bill_data["Quantity"].append(quantity)
            bill_data["Price"].append(self.items[item] * quantity)
            bill_data["OrderTime"].append(order_time)

        self.bill_df = pd.DataFrame(bill_data)
        self.bill_df["Total"] = self.bill_df["Price"].sum()

        # Display the bill DataFrame
        print("Bill:")
        print(self.bill_df)

        messagebox.showinfo("Bill", "Bill generated. Check the console for the DataFrame.")
        # Close the pop-up window after displaying the bill
        self.root.focus_set()
        self.root.destroy()


    def past_records(self):
        messagebox.showinfo("Past Records", "This feature is not implemented yet.")

    def clear_selection(self):
        for item, info in self.orders.items():
            info["var"].set(0)
            info["quantity"] = 0
            info["quantity_button"].configure(text="Select")

    def update_sample_bill(self, item):
        selected_items = []
        total_price = 0

        for item, info in self.orders.items():
            quantity = info["quantity"]
            if quantity:
                selected_items.append((item, quantity))
                total_price += self.items[item] * quantity

        gst_amount = (total_price * self.gst_percentage) / 100

        bill = f"ORDER INFO: {self.customer_name.get()}\n"
        bill += f"EMPLOYEE ID: {self.customer_contact.get()}\n\n"
        bill += "Selected Items:\n"
        for item, quantity in selected_items:
            bill += f"{item} x {quantity} - {self.convert_to_inr(self.items[item] * quantity)}\n"
        bill += f"\nTotal Price: {self.convert_to_inr(total_price)}\n"
        bill += f"GST ({self.gst_percentage}%): {self.convert_to_inr(gst_amount)}\n"
        bill += f"Grand Total: {self.convert_to_inr(total_price + gst_amount)}"

        self.sample_bill_text.delete("1.0", tk.END)  # Clear previous contents
        self.sample_bill_text.insert(tk.END, bill)

    def validate_contact(self, value):
        return value.isdigit() or value == ""

    @staticmethod
    def convert_to_inr(amount):
        return "£" + str(amount)

    def generate_order_id(self):
        current_time = datetime.now().strftime("%Y%m%d%H%M%S")
        random_number = random.randint(100, 999)
        order_id = f"Order-{current_time}-{random_number}"
        return order_id

root = tk.Tk()
restaurant_system = RestaurantManagementSystem(root)
root.mainloop()

# Access the bill_df DataFrame outside the class
if restaurant_system.bill_df is not None:
    print("Accessing the DataFrame outside the class:")
    print(restaurant_system.bill_df)
else:
    print("No bill generated yet.")

to_send = restaurant_system.bill_df
# Reorder the columns
new_column_order = ['OrderID', 'EmployeeID', 'TableNumber', 'Item', 'Quantity', 'Price', 'OrderTime', 'Gratitude', 'Total']
to_send = to_send.reindex(columns=new_column_order)
to_send.drop('Total',axis = 1,inplace = True)

# Create a cursor object to execute queries
cur = conn.cursor()

# Execute a SELECT query
cur.execute("SELECT * FROM recipes")

# Fetch the column names from the cursor description
columns = [desc[0] for desc in cur.description]

# Fetch all the data from the query result
rows = cur.fetchall()

# Close the cursor and connection
#cur.close()
#conn.close()

# Create a pandas DataFrame from the fetched data and column names
ingre = pd.DataFrame(rows, columns=columns)
ingre = ingre.pivot(index='Menu Items', columns='Ingredient', values='Quantity')
ingre = ingre.reset_index().fillna(0)
cols_to_convert = list(ingre.columns)[1:]
ingre[cols_to_convert] = ingre[cols_to_convert].astype(int)
ingre.reset_index(drop=True)
# Merge the two dataframes based on the "Item" column
merged_df = pd.merge(to_send, ingre, left_on="Item", right_on="Menu Items", how="left")

# Multiply the quantity with each column in the merged dataframe
for column in ingre.columns[1:]:
    merged_df[column] = merged_df[column] * merged_df["Quantity"]

# Drop unnecessary columns from the merged dataframe
merged_df = merged_df.drop(["OrderID", "Item", "Quantity", "Price", "OrderTime", "Item","Menu Items","Gratitude","EmployeeID","TableNumber"], axis=1)

to_check_stock = merged_df.sum().to_frame().T

# Create a cursor object to execute queries
#cur = conn.cursor()

# Execute a SELECT query
cur.execute("SELECT * FROM stock")

# Fetch the column names from the cursor description
columns = [desc[0] for desc in cur.description]

# Fetch all the data from the query result
rows = cur.fetchall()

# Close the cursor and connection
cur.close()
conn.close()

# Create a pandas DataFrame from the fetched data and column names
stock = pd.DataFrame(rows, columns=columns)




to_check_stock_t = to_check_stock.transpose()
to_check_stock_t.reset_index(inplace = True)
to_check_stock_t.columns = ['Ingredient', 'Quantity']
#stock_try = stock.transpose()
#stock_try.reset_index(inplace = True)
#stock_try.columns = ['Ingredient', 'Quantity']



# Create a pandas DataFrame from the fetched data and column names
stock = pd.DataFrame(rows, columns=columns)


mask = to_check_stock_t['Quantity'] <= stock['Quantity']
is_avaliabe = sum(mask)==len(stock)
num_columns = len(mask)
items_for_restock = []
stock_updated = stock['Ingredient']
stock_updated = stock_updated.to_frame()
            
if is_avaliabe == True:
    print('avaliable')
    stock_updated['Quantity'] = (stock['Quantity'] - to_check_stock_t['Quantity'])
    engine = create_engine(f'postgresql+psycopg2://{db_user}:{db_password}@{db_server}/{db_name}')
    table_name = 'orders'  # Specify the table name in the database
    to_send.to_sql(table_name, engine, if_exists='append', index=False)
    table_name = 'stock'  # Specify the table name in the database
    stock_updated.to_sql(table_name, engine, if_exists='replace', index=False)
    engine.dispose()
    
else:
#     for col in mask.columns:
#         for idx, value in mask[col].items():
#             if value == False:
#                 items_for_restock.append(col)
#                 break
    print('Unavaliable stock')
